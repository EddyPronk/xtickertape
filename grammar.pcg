###############################################################
#
#  Copyright (C) DSTC Pty Ltd (ACN 052 372 577) 1998.
#  Unpublished work.  All Rights Reserved.
#
#  The software contained on this media is the property of the
#  DSTC Pty Ltd.  Use of this software is strictly in accordance
#  with the license agreement in the accompanying LICENSE.DOC
#  file.  If your distribution of this software does not contain
#  a LICENSE.DOC file then you have no rights to use this
#  software in any manner and should contact DSTC at the address
#  below to determine an appropriate licensing arrangement.
#
#     DSTC Pty Ltd
#     Level 7, Gehrmann Labs
#     University of Queensland
#     St Lucia, 4072
#     Australia
#     Tel: +61 7 3365 4310
#     Fax: +61 7 3365 4311
#     Email: enquiries@dstc.edu.au
#
#  This software is being provided "AS IS" without warranty of
#  any kind.  In no event shall DSTC Pty Ltd be liable for
#  damage of any kind arising out of or in connection with
#  the use or performance of this software.
#
###############################################################

<config-file> ::= <subscription-list>
	[identity]


# A subscription list is one or more subscriptions
<subscription-list> ::= <subscription-list> <subscription>
	[extend_sub_list]
<subscription-list> ::= <subscription>
	[make_sub_list]

# Subscriptions are a tagged sub definition
<subscription> ::= <tag> LBRACE <statements> RBRACE SEMI
	[make_sub]
<subscription> ::= <tag> LBRACE RBRACE SEMI
	[make_default_sub]

# A tag is simply an ID followed by a COLON
<tag> ::= ID COLON
	[make_tag]

# A list of statements
<statements> ::= <statements> <statement>
	[extend_statements]
<statements> ::= <statement>
	[make_statements]


# So far we only support assignment statements
<statement> ::= ID ASSIGN <disjunction> SEMI
	[make_statement]


# Disjunctions have the lowest precedence
<disjunction> ::= <disjunction> OR <conjunction>
	[extend_disjunction]
<disjunction> ::= <conjunction>
	[identity]

# Conjunctions have the next highest precedence
<conjunction> ::= <conjunction> AND <term>
	[extend_conjunction]
<conjunction> ::= <term>
	[identity]

# A value may be a comparsion
<term> ::= <term> EQ <value>
	[make_eq]
<term> ::= <term> NEQ <value>
	[make_neq]
<term> ::= <term> LT <value>
	[make_lt]
<term> ::= <term> LE <value>
	[make_le]
<term> ::= <term> GT <value>
	[make_gt]
<term> ::= <term> GE <value>
	[make_ge]
<term> ::= <value>
	[identity]

# A value may be negated
<value> ::= BANG <value>
	[make_not]

# And they may be a comma-separated list of values
<values> ::= <values> COMMA <value>
	[extend_values]
<values> ::= <value>
	[make_values]

# A value can be many things, including basetypes
<value> ::= ID
	[identity]
<value> ::= STRING
	[identity]
<value> ::= INT32
	[identity]
<value> ::= INT64
	[identity]
<value> ::= REAL64
	[identity]

# Values can be lists
<value> ::= LBRACKET <values> RBRACKET
	[make_list]
<value> ::= LBRACKET RBRACKET
	[make_empty_list]

# Values are also returned from functions
<value> ::= ID LPAREN <values> RPAREN
	[make_function]
<value> ::= ID LPAREN RPAREN
	[make_noarg_function]

# And any disjunction becomes a value in parenthesis
<value> ::= LPAREN <disjunction> RPAREN
	[identity2]
